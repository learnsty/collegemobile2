#!/usr/bin/env php

<?php

	require_once './app.php';

	$model_path = __DIR__ . '/models/';

    $ctrl_path = __DIR__ . '/controllers/';

    $class_maps_path = __DIR__ . '/system/base/';

	$args  = $_SERVER['argv'];

	$promptList = NULL;

	$script_name = array_shift($args);
 
    $command = array_shift($args);

	$tokens = array_slice($args, 0);

	$stdinLines = array();

	$out = array();

	$in = NULL;

	$errormsg = "";

	$errorlevel = 0;

    if($command === "run:tests"){
        
         chdir('tests');

         // exec('phpunit', $out, $errorlevel);

         chdir('..');
    }

	if($command === "run:tasks"){

        chdir('packages');
         
        if(count($tokens) > 0){ 

             exec('grunt:' . $tokens[0], $out, $errorlevel);

        }else{

        	 exec('grunt', $out);
        }     

        chdir('..');

	}

	if($command === "run:dumpautoload"){

        chdir('packages');

        if(count($tokens) > 0){

	        switch ($tokens[0]) {

	            	case 'composer':

	            		exec('composer dumpautoload', $out, $errorlevel);

	            	break;
	            	default:
                    
            		     $errorlevel = 1;

            	    break;
	        }


	    }
	        
        chdir('..'); 
	}

	if($command === "run:install"){

        chdir('packages');

        if(count($tokens) > 0){ 

            if(array_key_exists(1, $tokens)){

            	$package = ' ' . $tokens[1];

            }else{

            	$package = '';

            }

            switch ($tokens[0]) {

            	case 'npm':

            		exec('npm install' . $package, $out, $errorlevel);

            	break;

            	case 'composer':

            		exec('composer require' . ($package !== ''? $package : ' --dev'), $out, $errorlevel);

            	break;
            	
            	default:
                    
            		$errorlevel = 1;

            	break;
            }

        }    
             
        chdir('..');    
   
	}


	if($command === "make:env"){

        make_file('.env');

		$promptList = array(
			'db_hostname= ',
			'db_username= ',
            'db_password= '
		);

		fwrite(STDOUT, PHP_EOL . "Please enter details for database: " . PHP_EOL);

		sleep(1);

		foreach ($promptList as $prompt) {
			
			 fwrite(STDOUT, $prompt);

			 $in .= fgets(STDIN);

			 fflush(STDIN);

			 $stdinLines[] = $prompt . $in;

		}

		$stdinLines[] = 'env_key=37hays63ha7agd737uagde737ba'; // encryption key

        write_to_file(implode('', $stdinLines), '.env');

        fwrite(STDOUT, PHP_EOL . "All Done. " . PHP_EOL);	
	}

	if($command === 'make:model'){

	    while(NULL !== ($token = array_shift($tokens))){

	    	 $in = $model_path . ucfirst($token) . '.php';

	    	 fwrite(STDOUT, 'Creating Model File: ' . ucfirst($token) . '.php' . PHP_EOL);

			 make_file($in);

			 sleep(1);

			 write_to_file("<?php \n\n class " . ucfirst($token) . " extends Model { \n\n\t protected $table = 'fill this in'; \n\n\t protected $primaryKey = 'fill this in'; \n\n\t protected $relations = array(); \n\n\t\t public function __construct(){ \n\n\t\t parent::__construct(); \n\n\t\t }  \n\n\t } \n\n ?>", $in);

			 $marker = '     "\\Model" => $compDir . "/../../models/Model",' . PHP_EOL;

			 $class_map_arr = file($class_maps_path . '/class_maps.php'); // FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES

             $key = array_search($marker, $class_map_arr);

             array_splice($class_map_arr, intval($key)+1, 0, preg_replace('/Model/', ucfirst($token), $marker));

             file_put_contents($class_maps_path . 'class_maps.php', implode('', $class_map_arr), LOCK_EX);

		}

		fwrite(STDOUT, PHP_EOL . "All Done. " . PHP_EOL);

	}

	if($command === 'make:controller'){

        while(NULL !== ($token = array_shift($tokens))){

        	$in = $ctrl_path . ucfirst($token) . '.php';

	    	fwrite(STDOUT, 'Creating Controller File: ' . ucfirst($token) . '.php' . PHP_EOL);

        	make_file($in);

        	sleep(1);

        	write_to_file("<?php \n\n class " . ucfirst($token) ." extends Controller { \n\n\t protected $params; \n\n\t\t public function __construct($params){ \n\n\t\t\t parent::__construct($params); \n\n\t\t }  \n\n\t } \n\n\t protected function index($model){  \n\n\t\t # code... \n\n\t } \n\n ?>", $in);

        	$marker = '     "\\Controller" => $compDir . "/../../controllers/Controller",' . PHP_EOL;

            $class_map_arr = file($class_maps_path . 'class_maps.php'); // FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES

            $key = array_search($marker, $class_map_arr);

            array_splice($class_map_arr, intval($key)+1, 0, preg_replace('/Controller/', ucfirst($token), $marker));

            file_put_contents($class_maps_path . 'class_maps.php', implode('', $class_map_arr), LOCK_EX);

        }

        fwrite(STDOUT, PHP_EOL . "All Done. " . PHP_EOL);

	}

	if($command === 'make:route'){

        $promptList = array(
			'route_path= ',
			'route_settings= '
		);

		fwrite(STDOUT, PHP_EOL . "Please enter details for route: " . PHP_EOL);

		sleep(1);

		foreach ($promptList as $prompt) {
			
			 fwrite(STDOUT, $prompt);

			 $in .= fgets(STDIN);

			 fflush(STDIN);

			 $stdinLines[str_replace('=', '', $prompt)] =  $in;

		}
	}

	$outline = join($out); 

	if($errorlevel === 0){

		fwrite(STDOUT, str_replace('~', '', $outline));

		fclose(STDOUT);
	}

	if($errorlevel === 1){ 

        fwrite(STDERR, str_replace('~', '', $outline));

		fclose(STDERR);

	}

	$out = array();

	exit($errorlevel);

?>